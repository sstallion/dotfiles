" vimrc - vim configuration

set nocompatible

call plug#begin()
Plug 'MattesGroeger/vim-bookmarks'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'editorconfig/editorconfig-vim'
Plug 'embear/vim-localvimrc'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'fidian/hexmode'
Plug 'itchyny/lightline.vim'
Plug 'jamessan/vim-gnupg'
Plug 'ludovicchabant/vim-gutentags'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'mhinz/vim-grepper'
Plug 'romainl/vim-qf'
Plug 'sheerun/vim-polyglot'
Plug 'sstallion/lightline-wtf'
Plug 'sstallion/vim-cursorline'
Plug 'sstallion/vim-whitespace'
Plug 'sstallion/vim-wildignore'
Plug 'sstallion/vim-wtf'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-pathogen'
Plug 'tpope/vim-scriptease'
Plug 'tpope/vim-vinegar'
Plug 'vimwiki/vimwiki'
Plug 'wincent/command-t', { 'tag': '5.0*' }
Plug 'wincent/terminus'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
call plug#end()

" Abort initialization if installing plugins:
if exists('g:plug_install')
  finish
endif

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax')
  syntax on
endif

" Default Options
set autoread
set autowrite
set autowriteall
set backspace=indent,eol,start
set nobackup
set noerrorbells
set hidden
set nojoinspaces
set laststatus=2
set nolazyredraw
set modeline
set number
set ruler
set showmatch
set showmode
set splitbelow
set splitright
set noswapfile
set switchbuf=useopen,usetab
set timeoutlen=2000
set ttimeoutlen=0
set ttyfast
set updatetime=100
set visualbell t_vb=
set wildmode=longest:list
set nowrap

" Feature Options
" if has('clipboard')
"   set clipboard=unnamed
"   if has('unnamedplus')
"     set clipboard+=unnamedplus
"   endif
" endif

if has('diff')
  set diffopt=filler,context:3
endif

if has('extra_search')
  set nohlsearch
endif

if has('reltime')
  set noincsearch
endif

if has('folding')
  set nofoldenable
endif

if has('mksession')
  set sessionoptions-=buffers
endif

if has('mouse')
  set mouse=a
  if has('mouse_sgr')
    set ttymouse=sgr
  endif
endif

if has('multi_byte')
  set encoding=utf-8
endif

if has('syntax')
  " Leave cursorline disabled as performance on macOS is abysmal with
  " this enabled. This is why we can't have nice things.
  if !has('osx')
    set cursorline
  endif
endif

if has('windows')
  set showtabline=2
  set winminheight=0
endif

" Default Indentation
set autoindent
set shiftround
set shiftwidth=8
set softtabstop=8
set tabstop=8
set textwidth=78

" Key Mappings
noremap <C-J> <PageDown>
noremap <C-K> <PageUp>

noremap <silent> <Leader>n :set hlsearch!<CR>
noremap <silent> <Leader>p :set paste!<CR>
noremap <silent> <Leader>r :set relativenumber!<CR>
noremap <silent> <Leader>s :set spell!<CR>

noremap <silent> [b :bprevious<CR>
noremap <silent> ]b :bnext<CR>
noremap <silent> [B :bfirst<CR>
noremap <silent> ]B :blast<CR>

noremap <silent> [l :lprevious<CR>
noremap <silent> ]l :lnext<CR>
noremap <silent> [L :lfirst<CR>
noremap <silent> ]L :llast<CR>

noremap <silent> [q :cprevious<CR>
noremap <silent> ]q :cnext<CR>
noremap <silent> [Q :cfirst<CR>
noremap <silent> ]Q :clast<CR>

noremap <silent> [t :tabprevious<CR>
noremap <silent> ]t :tabnext<CR>
noremap <silent> [T :tabfirst<CR>
noremap <silent> ]T :tablast<CR>

" Remote terminals don't cope particularly well with arrow keys in
" insert mode. The key mappings proposed in Solution 15 works around the
" issue without having to modify the 'term' option;
" see: http://vim.wikia.com/wiki/Fix_arrow_keys_that_display_A_B_C_D_on_remote_shell.
inoremap <Esc>oA <Esc>ki
inoremap <Esc>oB <Esc>ji
inoremap <Esc>oC <Esc>li
inoremap <Esc>oD <Esc>hi

" Disable horizontal scrolling:
map <ScrollWheelLeft> <Nop>
map <ScrollWheelRight> <Nop>

" Stop insert mode when leaving a buffer. This avoids accidental
" insertions when navigating with a mouse.
autocmd BufLeave * stopinsert

" Color Scheme
colorscheme wtf
